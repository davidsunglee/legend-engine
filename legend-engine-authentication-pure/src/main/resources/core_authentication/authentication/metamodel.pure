// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::authentication::*;
import meta::pure::authentication::oauth::*;
import meta::pure::credential::*;

Class <<typemodifiers.abstract>> meta::pure::credential::Credential
{
  provider: CredentialProvider[1];
}

Class meta::pure::credential::PlainTextCredential extends Credential
{
}

Class meta::pure::credential::PrivateKeyCredential extends Credential
{
}

Class <<typemodifiers.abstract>> meta::pure::credential::CredentialProvider
{
}

Class meta::pure::credential::VaultCredentialProvider extends CredentialProvider
{
  vaultReference: String[1];
}

Class <<typemodifiers.abstract>> meta::pure::authentication::Authentication
{
}

Class meta::pure::authentication::UsernamePasswordAuthentication extends Authentication
{
  username: String[1];
  password: PlainTextCredential[0..1];
}

Class meta::pure::authentication::KeyPairAuthentication extends Authentication
{
  username: String[1];
  privateKey: PrivateKeyCredential[1];
  passphrase: PlainTextCredential[0..1];
}

Class meta::pure::authentication::OAuthAuthentication extends Authentication
{
  scopes: String[1..*];
  identityProvider: IdentityProvider[1];
}

Class
<<typemodifiers.abstract>>
meta::pure::authentication::oauth::IdentityProvider
{
}

Class meta::pure::authentication::oauth::OidcIdentityProvider extends IdentityProvider
{
  discoveryUrl: String[1];
}

Class meta::pure::authentication::oauth::NonOidcIdentityProvider extends IdentityProvider
{
  url: String[1];
}

Class meta::pure::authentication::ApiKeyAuthentication extends Authentication
{
  location: ApiKeyLocation[1];
  name: String[1];
  value: PlainTextCredential[1];
}

Enum meta::pure::authentication::ApiKeyLocation
{
  HEADER, QUERY, COOKIE
}
